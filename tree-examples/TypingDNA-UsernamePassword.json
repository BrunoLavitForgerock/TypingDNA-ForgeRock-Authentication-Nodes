
{
  "origin": "7eaaf9acca4d14b852a80d23be76ee0f -",
  "innernodes": {
    "d3a05253-5a09-47e6-83a1-e7c306e5b517": {
      "_id": "d3a05253-5a09-47e6-83a1-e7c306e5b517",
      "_type": {
        "_id": "UsernameCollectorNode",
        "name": "Username Collector",
        "collection": true
      },
      "_outcomes": [
        {
          "id": "outcome",
          "displayName": "Outcome"
        }
      ]
    },
    "10b42396-4bb8-4b63-9d79-bb6b1edfa85a": {
      "_id": "10b42396-4bb8-4b63-9d79-bb6b1edfa85a",
      "_type": {
        "_id": "PasswordCollectorNode",
        "name": "Password Collector",
        "collection": true
      },
      "_outcomes": [
        {
          "id": "outcome",
          "displayName": "Outcome"
        }
      ]
    },
    "badea6bd-43f6-46a2-abd8-e09159b580b8": {
      "_id": "badea6bd-43f6-46a2-abd8-e09159b580b8",
      "showVisualizer": true,
      "targetIds": [
        "idToken1",
        "idToken2",
        "idToken3"
      ],
      "displayMessage": true,
      "disableCopyAndPaste": true,
      "script": "dcf58b60-2c30-4ce6-b5ca-9d34987ecec8",
      "submitButtonId": "loginButton_0",
      "_type": {
        "_id": "TypingDNARecorder",
        "name": "TypingDNA Recorder",
        "collection": true
      },
      "_outcomes": [
        {
          "id": "outcome",
          "displayName": "Outcome"
        }
      ]
    }
  },
  "nodes": {
    "1509e9a2-bd21-4d29-9e05-d2a33e673cd5": {
      "_id": "1509e9a2-bd21-4d29-9e05-d2a33e673cd5",
      "_type": {
        "_id": "DataStoreDecisionNode",
        "name": "Data Store Decision",
        "collection": true
      },
      "_outcomes": [
        {
          "id": "true",
          "displayName": "True"
        },
        {
          "id": "false",
          "displayName": "False"
        }
      ]
    },
    "39b25c55-376d-4ca6-91e5-ffce265f54fd": {
      "_id": "39b25c55-376d-4ca6-91e5-ffce265f54fd",
      "pageHeader": {},
      "pageDescription": {},
      "nodes": [
        {
          "_id": "d3a05253-5a09-47e6-83a1-e7c306e5b517",
          "nodeType": "UsernameCollectorNode",
          "displayName": "Username Collector"
        },
        {
          "_id": "10b42396-4bb8-4b63-9d79-bb6b1edfa85a",
          "nodeType": "PasswordCollectorNode",
          "displayName": "Password Collector"
        },
        {
          "_id": "badea6bd-43f6-46a2-abd8-e09159b580b8",
          "nodeType": "TypingDNARecorder",
          "displayName": "TypingDNA Recorder"
        }
      ],
      "_type": {
        "_id": "PageNode",
        "name": "Page Node",
        "collection": true
      },
      "_outcomes": [
        {
          "id": "outcome",
          "displayName": "Outcome"
        }
      ]
    },
    "8b858eb1-b906-4cbe-b694-e35476e46425": {
      "_id": "8b858eb1-b906-4cbe-b694-e35476e46425",
      "apiUrl": "https://api.typingdna.com",
      "usernameSalt": "random_string",
      "requestIdentifier": "ForgeRock",
      "retries": 1,
      "requestTimeout": 8000,
      "authAPIConfiguration": "Basic",
      "hashAlgorithm": "SHA256",
      "_type": {
        "_id": "TypingDNADecisionNode",
        "name": "TypingDNA Decision Node",
        "collection": true
      },
      "_outcomes": [
        {
          "id": "ENROLL",
          "displayName": "Enroll"
        },
        {
          "id": "INITIAL_ENROLLMENT_COMPLETE",
          "displayName": "Initial enrollment complete"
        },
        {
          "id": "RETRY",
          "displayName": "Retry"
        },
        {
          "id": "MATCH",
          "displayName": "Match"
        },
        {
          "id": "NO_MATCH",
          "displayName": "No match"
        },
        {
          "id": "FAIL",
          "displayName": "Fail"
        }
      ]
    }
  },
  "scripts": {
    "dcf58b60-2c30-4ce6-b5ca-9d34987ecec8": {
      "_id": "dcf58b60-2c30-4ce6-b5ca-9d34987ecec8",
      "name": "TypingDNA",
      "description": null,
      "script": "",
      "default": false,
      "language": "JAVASCRIPT",
      "context": "AUTHENTICATION_CLIENT_SIDE",
      "createdBy": "null",
      "creationDate": 0,
      "lastModifiedBy": "null",
      "lastModifiedDate": 0
    }
  },
  "tree": {
    "_id": "TypingDNA-UsernamePassword",
    "entryNodeId": "39b25c55-376d-4ca6-91e5-ffce265f54fd",
    "staticNodes": {
      "startNode": {
        "x": 50,
        "y": 98.46945381164551
      },
      "70e691a5-1e33-4ac3-a356-e7b6d60d92e0": {
        "x": 801.1079902648926,
        "y": 131.96022033691406
      },
      "e301438c-0bd0-429c-ab0c-66126501069a": {
        "x": 801.1079902648926,
        "y": 64.97868728637695
      }
    },
    "uiConfig": {},
    "nodes": {
      "1509e9a2-bd21-4d29-9e05-d2a33e673cd5": {
        "displayName": "Data Store Decision",
        "nodeType": "DataStoreDecisionNode",
        "x": 367.24431228637695,
        "y": 75.82740783691406,
        "connections": {
          "false": "e301438c-0bd0-429c-ab0c-66126501069a",
          "true": "8b858eb1-b906-4cbe-b694-e35476e46425"
        }
      },
      "39b25c55-376d-4ca6-91e5-ffce265f54fd": {
        "displayName": "LogIn Page",
        "nodeType": "PageNode",
        "x": 152,
        "y": 25,
        "connections": {
          "outcome": "1509e9a2-bd21-4d29-9e05-d2a33e673cd5"
        }
      },
      "8b858eb1-b906-4cbe-b694-e35476e46425": {
        "displayName": "TypingDNA Decision Node",
        "nodeType": "TypingDNADecisionNode",
        "x": 563.6931648254395,
        "y": 41.537635803222656,
        "connections": {
          "ENROLL": "39b25c55-376d-4ca6-91e5-ffce265f54fd",
          "INITIAL_ENROLLMENT_COMPLETE": "39b25c55-376d-4ca6-91e5-ffce265f54fd",
          "RETRY": "39b25c55-376d-4ca6-91e5-ffce265f54fd",
          "MATCH": "70e691a5-1e33-4ac3-a356-e7b6d60d92e0",
          "NO_MATCH": "e301438c-0bd0-429c-ab0c-66126501069a",
          "FAIL": "e301438c-0bd0-429c-ab0c-66126501069a"
        }
      }
    }
  }
}
