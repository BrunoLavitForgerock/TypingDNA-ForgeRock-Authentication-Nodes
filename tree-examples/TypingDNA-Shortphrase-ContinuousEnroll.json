
{
  "origin": "027ccb72ca3dda4b18c95bbf44873714 -",
  "innernodes": {
    "0d9562c1-be82-4a4e-9823-ad52adfffa7f": {
      "_id": "0d9562c1-be82-4a4e-9823-ad52adfffa7f",
      "_type": {
        "_id": "UsernameCollectorNode",
        "name": "Username Collector",
        "collection": true
      }
    },
    "42993513-5a9e-4762-9a8c-ef6437e29cd3": {
      "_id": "42993513-5a9e-4762-9a8c-ef6437e29cd3",
      "_type": {
        "_id": "PasswordCollectorNode",
        "name": "Password Collector",
        "collection": true
      }
    },
    "c0eac671-f8fc-4d9d-a6bc-192ed9c97eb9": {
      "_id": "c0eac671-f8fc-4d9d-a6bc-192ed9c97eb9",
      "textToEnter": "I am authenticated by the way I type",
      "_type": {
        "_id": "TypingDNAShortPhraseCollector",
        "name": "TypingDNA Short Phrase Collector",
        "collection": true
      }
    },
    "c53c1c93-bcfe-431b-a768-31ed5c972a42": {
      "_id": "c53c1c93-bcfe-431b-a768-31ed5c972a42",
      "showVisualizer": true,
      "displayMessage": true,
      "script": "42e487f5-33c1-4775-a5dc-56b76041e978",
      "disableCopyAndPaste": true,
      "_type": {
        "_id": "TypingDNARecorder",
        "name": "TypingDNA Recorder",
        "collection": true
      }
    }
  },
  "nodes": {
    "13b0504e-e6fe-4087-ae86-dc534e509aac": {
      "_id": "13b0504e-e6fe-4087-ae86-dc534e509aac",
      "nodes": [
        {
          "_id": "0d9562c1-be82-4a4e-9823-ad52adfffa7f",
          "nodeType": "UsernameCollectorNode",
          "displayName": "Username Collector"
        },
        {
          "_id": "42993513-5a9e-4762-9a8c-ef6437e29cd3",
          "nodeType": "PasswordCollectorNode",
          "displayName": "Password Collector"
        }
      ],
      "_type": {
        "_id": "PageNode",
        "name": "Page Node",
        "collection": true
      }
    },
    "44985fef-76b3-46b2-a029-9e4709cacaa1": {
      "_id": "44985fef-76b3-46b2-a029-9e4709cacaa1",
      "nodes": [
        {
          "_id": "c0eac671-f8fc-4d9d-a6bc-192ed9c97eb9",
          "nodeType": "TypingDNAShortPhraseCollector",
          "displayName": "TypingDNA Short Phrase Collector"
        },
        {
          "_id": "c53c1c93-bcfe-431b-a768-31ed5c972a42",
          "nodeType": "TypingDNARecorder",
          "displayName": "TypingDNA Recorder"
        }
      ],
      "_type": {
        "_id": "PageNode",
        "name": "Page Node",
        "collection": true
      }
    },
    "90f2e5c8-7f47-4f5b-975b-9b4762c5e4e7": {
      "_id": "90f2e5c8-7f47-4f5b-975b-9b4762c5e4e7",
      "_type": {
        "_id": "DataStoreDecisionNode",
        "name": "Data Store Decision",
        "collection": true
      }
    },
    "ec7c3bb9-9bbf-453a-928d-243dca1f5a01": {
      "_id": "ec7c3bb9-9bbf-453a-928d-243dca1f5a01",
      "retries": 1,
      "matchScore": 70,
      "apiKey": "",
      "apiUrl": "https://api.typingdna.com",
      "usernameSalt": "salt",
      "enrollmentsNecessary": 2,
      "requestIdentifier": "tdna-shortphrase-enroll",
      "apiSecret": "",
      "autoEnrollScore": 90,
      "requestTimeout": 8000,
      "verifyAfterEnroll": false,
      "_type": {
        "_id": "TypingDNADecisionNode",
        "name": "TypingDNA Decision Node",
        "collection": true
      }
    }
  },
  "scripts": {
    "42e487f5-33c1-4775-a5dc-56b76041e978": {
      "_id": "42e487f5-33c1-4775-a5dc-56b76041e978",
      "name": "TypingDNA",
      "description": "",
      "script": "",
      "default": false,
      "language": "JAVASCRIPT",
      "context": "AUTHENTICATION_CLIENT_SIDE",
      "createdBy": "null",
      "creationDate": 0,
      "lastModifiedBy": "null",
      "lastModifiedDate": 0
    }
  },
  "tree": {
    "_id": "TypingDNA-Shortphrase-ContinuousEnroll",
    "nodes": {
      "13b0504e-e6fe-4087-ae86-dc534e509aac": {
        "displayName": "Login",
        "nodeType": "PageNode",
        "connections": {
          "outcome": "90f2e5c8-7f47-4f5b-975b-9b4762c5e4e7"
        }
      },
      "44985fef-76b3-46b2-a029-9e4709cacaa1": {
        "displayName": "TypingDNA",
        "nodeType": "PageNode",
        "connections": {
          "outcome": "ec7c3bb9-9bbf-453a-928d-243dca1f5a01"
        }
      },
      "90f2e5c8-7f47-4f5b-975b-9b4762c5e4e7": {
        "displayName": "Data Store Decision",
        "nodeType": "DataStoreDecisionNode",
        "connections": {
          "false": "e301438c-0bd0-429c-ab0c-66126501069a",
          "true": "44985fef-76b3-46b2-a029-9e4709cacaa1"
        }
      },
      "ec7c3bb9-9bbf-453a-928d-243dca1f5a01": {
        "displayName": "TypingDNA Decision Node",
        "nodeType": "TypingDNADecisionNode",
        "connections": {
          "ENROLL": "70e691a5-1e33-4ac3-a356-e7b6d60d92e0",
          "RETRY": "44985fef-76b3-46b2-a029-9e4709cacaa1",
          "MATCH": "70e691a5-1e33-4ac3-a356-e7b6d60d92e0",
          "NO_MATCH": "e301438c-0bd0-429c-ab0c-66126501069a",
          "FAIL": "e301438c-0bd0-429c-ab0c-66126501069a"
        }
      }
    },
    "entryNodeId": "13b0504e-e6fe-4087-ae86-dc534e509aac"
  }
}
